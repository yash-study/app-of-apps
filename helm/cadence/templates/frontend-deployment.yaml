{{- if .Values.frontend.enabled }}
# Frontend Deployment
# The frontend service provides the public-facing RPC API for Cadence clients
# Clients (workflow workers, admin tools) connect to this service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cadence.fullname" . }}-frontend
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cadence.componentLabels" (dict "component" "frontend" "context" $) | nindent 4 }}
    {{- with .Values.frontend.podLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.frontend.replicaCount }}
  selector:
    matchLabels:
      {{- include "cadence.componentSelectorLabels" (dict "component" "frontend" "context" $) | nindent 6 }}
  template:
    metadata:
      annotations:
        # Force pod restart when ConfigMap changes
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.frontend.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "cadence.componentSelectorLabels" (dict "component" "frontend" "context" $) | nindent 8 }}
        {{- with .Values.frontend.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "cadence.serviceAccountName" . }}
      {{- with .Values.frontend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.frontend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.frontend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: frontend
        image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag }}"
        imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
        env:
        # Tell Cadence server which service to run
        - name: SERVICES
          value: frontend

        # Logging configuration
        - name: LOG_LEVEL
          value: {{ .Values.cadence.logLevel }}

        # Config file path
        - name: DYNAMIC_CONFIG_FILE_PATH
          value: config/dynamicconfig/config.yaml

        # MySQL credentials from secret (created by External Secrets Operator)
        - name: MYSQL_PWD
          valueFrom:
            secretKeyRef:
              name: {{ include "cadence.mysql.secretName" . }}
              key: {{ .Values.mysql.secretKeys.password }}

        # Database connection parameters
        - name: DB
          value: mysql
        - name: DB_PORT
          value: {{ include "cadence.mysql.port" . | quote }}
        - name: MYSQL_USER
          value: {{ include "cadence.mysql.user" . }}
        - name: MYSQL_SEEDS
          value: {{ include "cadence.mysql.host" . }}
        - name: KEYSPACE
          value: {{ include "cadence.mysql.database" . }}
        - name: VISIBILITY_KEYSPACE
          value: {{ include "cadence.mysql.visibilityDatabase" . }}

        # Cassandra compatibility (not used with MySQL but required by image)
        - name: CASSANDRA_CONSISTENCY
          value: One
        - name: CASSANDRA_PROTO_VERSION
          value: "4"

        # Prometheus metrics endpoint
        - name: PROMETHEUS_ENDPOINT
          value: 0.0.0.0:{{ .Values.prometheus.port }}

        ports:
        # RPC port for Cadence client connections
        - name: rpc
          containerPort: 7933
          protocol: TCP

        # Prometheus metrics port
        - name: metrics
          containerPort: {{ .Values.prometheus.port }}
          protocol: TCP

        # Liveness probe - restart container if unhealthy
        livenessProbe:
          tcpSocket:
            port: rpc
          initialDelaySeconds: 30  # Wait 30s before first check
          periodSeconds: 10        # Check every 10s
          timeoutSeconds: 5        # Timeout after 5s
          failureThreshold: 3      # Restart after 3 failures

        # Readiness probe - remove from service if not ready
        readinessProbe:
          tcpSocket:
            port: rpc
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        # Resource limits and requests
        resources:
          {{- toYaml .Values.frontend.resources | nindent 12 }}

        volumeMounts:
        # Mount Cadence configuration
        - name: config
          mountPath: /etc/cadence/config/config.yaml
          subPath: config.yaml

        # Mount dynamic config (empty for now)
        - name: dynamicconfig
          mountPath: /etc/cadence/config/dynamicconfig

      volumes:
      # ConfigMap containing Cadence configuration
      - name: config
        configMap:
          name: {{ include "cadence.fullname" . }}-config

      # EmptyDir for dynamic configuration (can be populated by init container if needed)
      - name: dynamicconfig
        emptyDir: {}
{{- end }}
