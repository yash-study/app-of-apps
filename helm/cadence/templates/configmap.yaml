# Cadence Configuration ConfigMap
# This ConfigMap contains the main configuration file for all Cadence services
# Mounted into all pods at /etc/cadence/config/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cadence.fullname" . }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cadence.labels" . | nindent 4 }}
data:
  config.yaml: |
    # Logging configuration
    log:
      stdout: true  # Log to stdout for Kubernetes log collection
      level: {{ .Values.cadence.logLevel }}

    # Persistence configuration - defines database connections
    persistence:
      defaultStore: default     # Primary datastore for workflow data
      visibilityStore: visibility  # Secondary datastore for search/listing
      numHistoryShards: {{ .Values.cadence.numHistoryShards }}

      datastores:
        # Default datastore - stores workflow execution history, domains, tasks
        default:
          sql:
            pluginName: {{ .Values.cadence.persistence.default.sql.driver }}
            databaseName: {{ include "cadence.mysql.database" . }}
            connectAddr: {{ include "cadence.mysql.host" . }}:{{ include "cadence.mysql.port" . }}
            connectProtocol: tcp
            user: {{ include "cadence.mysql.user" . }}
            # Password is injected via environment variable MYSQL_PWD (from secret)
            maxConns: {{ .Values.cadence.persistence.default.sql.maxConns }}
            maxIdleConns: {{ .Values.cadence.persistence.default.sql.maxIdleConns }}
            maxConnLifetime: {{ .Values.cadence.persistence.default.sql.maxConnLifetime }}

        # Visibility datastore - stores workflow metadata for search and listing
        visibility:
          sql:
            pluginName: {{ .Values.cadence.persistence.visibility.sql.driver }}
            databaseName: {{ include "cadence.mysql.visibilityDatabase" . }}
            connectAddr: {{ include "cadence.mysql.host" . }}:{{ include "cadence.mysql.port" . }}
            connectProtocol: tcp
            user: {{ include "cadence.mysql.user" . }}
            # Password is injected via environment variable MYSQL_PWD (from secret)
            maxConns: {{ .Values.cadence.persistence.visibility.sql.maxConns }}
            maxIdleConns: {{ .Values.cadence.persistence.visibility.sql.maxIdleConns }}
            maxConnLifetime: {{ .Values.cadence.persistence.visibility.sql.maxConnLifetime }}

    # Cluster metadata - defines cluster topology
    clusterMetadata:
      enableGlobalDomain: {{ .Values.cadence.clusterMetadata.enableGlobalDomain }}
      failoverVersionIncrement: {{ .Values.cadence.clusterMetadata.failoverVersionIncrement }}
      masterClusterName: {{ .Values.cadence.clusterMetadata.masterClusterName }}
      currentClusterName: {{ .Values.cadence.clusterMetadata.currentClusterName }}
      clusterInformation:
        {{ .Values.cadence.clusterMetadata.currentClusterName }}:
          enabled: true
          initialFailoverVersion: 1
          rpcName: cadence-frontend
          rpcAddress: {{ include "cadence.fullname" . }}-frontend:7933

    # Service-specific configurations
    services:
      # Frontend service - public-facing RPC API
      frontend:
        rpc:
          port: 7933
          bindOnLocalHost: false  # Bind to all interfaces
        metrics:
          prometheus:
            timerType: histogram  # Use histograms for latency metrics
            listenAddress: 0.0.0.0:{{ .Values.prometheus.port }}

      # Matching service - task queue management
      matching:
        rpc:
          port: 7935
          bindOnLocalHost: false
        metrics:
          prometheus:
            timerType: histogram
            listenAddress: 0.0.0.0:{{ .Values.prometheus.port }}

      # History service - workflow execution engine
      history:
        rpc:
          port: 7934
          bindOnLocalHost: false
        metrics:
          prometheus:
            timerType: histogram
            listenAddress: 0.0.0.0:{{ .Values.prometheus.port }}

      # Worker service - background system workflows
      worker:
        rpc:
          port: 7939
          bindOnLocalHost: false
        metrics:
          prometheus:
            timerType: histogram
            listenAddress: 0.0.0.0:{{ .Values.prometheus.port }}
